'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

exports.default = fetchMiddleware;

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _symbol = require('commPath/symbol.js');

var PubSymbol = _interopRequireWildcard(_symbol);

var _config = require('commPath/config.js');

var config = _interopRequireWildcard(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author chenxiaobo
 */
var showLoader = function showLoader(show) {
  console.log('显示加载动画', show);
};

function fetchMiddleware(client) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        // console.log('fetchMiddleware >>>');
        // 调用用户action里的函数
        if (typeof action === 'function') {
          return action(dispatch, getState);
        }
        // 默认的action处理过程
        if (!action.hasOwnProperty(PubSymbol.FETCH)) {
          return next(action);
        }
        // 用fetchMiddleware.js中间件处理
        if (action[PubSymbol.FETCH] === false) {
          return next(action);
        }

        var requestData = action.requestData,
            requestOptions = action.requestOptions,
            pageName = action.pageName,
            type = action.type,
            url = action.url;

        var REQ_NOTICE = action[PubSymbol.REQ_NOTICE] || false;
        var SHOW_LOADER = action[PubSymbol.SHOW_LOADER] || true;
        if (typeof url === 'function') {
          return url(getState());
        }
        if (typeof url !== 'string') {
          throw new Error('调用接口url必须是字符串');
        }

        // 这里要加个特定通知, 有些不会使用全局通知
        if (SHOW_LOADER) {
          showLoader(true);
        }
        var callNext = function callNext(state, body) {
          var _next;

          return next((_next = {
            pageName: pageName,
            type: type
          }, (0, _defineProperty3.default)(_next, PubSymbol.FETCH, true), (0, _defineProperty3.default)(_next, 'requestData', requestData), (0, _defineProperty3.default)(_next, 'requestOptions', requestOptions), (0, _defineProperty3.default)(_next, PubSymbol.STATE, state), (0, _defineProperty3.default)(_next, 'body', body), _next));
        };
        // 避免频繁刷新页面调用render函数
        // 这里大部分情况应该是不要这个通知的
        if (REQ_NOTICE) {
          callNext('request', '');
        }
        return new _promise2.default(function (resolve, reject) {
          var urlall = config.apiUrl + url;
          var request = _superagent2.default.post(urlall).withCredentials().set('Content-Type', 'application/json').accept('application/json');
          if (requestData) {
            request.send(requestData);
          }
          request.end(function (err) {
            var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                body = _ref2.body;

            SHOW_LOADER && showLoader(false);
            if (err) {
              callNext('failure', err);
              reject(err);
              _modal2.default.error({ title: '调接口异常!' });
            } else if (body.responseCode === 10000) {
              resolve(body);
              callNext('success', body);
            } else {
              callNext('failure', body);
              reject(body);
              _modal2.default.error({ title: '服务器出错!', content: body.responseMsg });
            }
          });
        });
      };
    };
  };
}
module.exports = exports['default'];